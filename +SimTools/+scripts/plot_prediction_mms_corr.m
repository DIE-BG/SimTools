function plot_prediction_mms_corr(MODEL, varargin)

% plot_prediction_mms_corr realiza las gráficas del proceso de predicción del
% modelo.
%{
% ## Syntax ##
%
%     plot_prediction_mms_corr(MODEL, varargin)
%
% ## Input Arguments ##
%
% __`MODEL`__ [ struct ] -
% Debe contener al menos la estructura del modelo `MODEL.M`, la estructura
% de fechas `MODEL.DATES`, así como la estructura de resultados del proceso
% de predicción `MODEL.F_pred`.
%
% ## Options ##
%
% * StartDate = MODEL.DATES.hist_start [ `DateWrapper` ] - Fecha a la que
% empieza a graficar la historia.
%
% * SavePath = fullfile(userpath, 'temp') [ `String` ] - Directorio donde
% guarda la gráfica.
%
% * CloseAll = [`true`|false] - Cerrar todas las gráficas luego de
% completar el proceso.
%
% * PlotList = get(MODEL.M, 'xlist')) [cell] - Nombre de las variables a
% graficar.
%
% * TabRange =  qq(2021,4):4:qq(2024,4) [ `DateWrapper` ] - Rango de fechas
% para graficar en la tabla.
%
% ## Output Arguments ##
%
%
% ## Description ##
%
%
% ## Example ##
%
%}

% -DIE
% -Octubre 2021

% Parametros opcionales de la función
p = inputParser;
    addParameter(p, 'StartDate', MODEL.DATES.hist_start);
    addParameter(p, 'SavePath', fullfile(userpath, 'temp'));
    addParameter(p, 'CloseAll', true);
    addParameter(p, 'PlotList', get(MODEL.M, 'xlist'));
    addParameter(p, 'TabRange', qq(2021,4):4:qq(2024,4));
    addParameter(p, 'AutoSave', false);
parse(p, varargin{:});
params = p.Results;

SS = get(MODEL.M, 'sstate');

% Verificación y creación del directorio para las gráficas
if ~isfolder(params.SavePath)
    mkdir(params.SavePath)
else
    rmdir(params.SavePath, 's')
    mkdir(params.SavePath)
end

list = params.PlotList;


for var = 1 : length(list)

    % ----- Creación de figura -----
    figure;

    set( ...
        gcf, ...
        'defaultaxesfontsize',12, ...
        'Position', [1 42.0182 1117.1 776.73] ...
    );
    main_p = uipanel('Units','normalized');
    
    % ----- Panel de gráfica -----
    plot_p = uipanel( ...
        main_p, ...
        'Position', [0, 1 - 0.8, 1, 0.8], ...
        'BackgroundColor', [1, 1, 1] ...
    );
    ax = axes(plot_p, 'Units','normalized' ,'Position', [0.1 0.1 0.85 0.8]);

    plot(...
        params.StartDate:MODEL.DATES.pred_end, ...
        MODEL.F_pred.(list{var}),'.-b', ...
        'MarkerSize', 20, ...
        'LineWidth', 2 ...
    );

    grid on;  
    
    if isempty(MODEL.data_mr.(list{var}).UserData.name)
        temp_title = list{var};
    else
        temp_title = MODEL.data_mr.(list{var}).UserData.name;
    end

    title( ...
        sprintf(...
            '%s \n %s - %s', ...
            temp_title, ...
            dat2char(MODEL.DATES.pred_start), ...
            dat2char(MODEL.DATES.pred_end)...
        ) ,...
        Interpreter='none'...
    )

    highlight(params.StartDate:MODEL.DATES.hist_end);

    vline( ...
        MODEL.END_HIST.(list{var}), ...
        'LineWidth', 1, ...
        'LineStyle', '-.' ...
    );
    
    zeroline();
    
    if SS.(strcat(list{var}, '_ss')) ~= 0
    hline(...
        SS.(strcat(list{var}, '_ss')), ...
        'LineWidth', 1.5, ...
        'LineStyle', ':' ...
        );
    end

    % Anotaciones
    die_anotaciones( ...
        dat2dec(params.TabRange)', ...
        MODEL.F_pred.(list{var})(params.TabRange), ...
        string(num2str(MODEL.F_pred.(list{var})(params.TabRange), '%0.2f')), ...
        'Container', plot_p ...
    )
    
    x_lims = get(gca, 'XLim');
    anotaciones_simples(...
       x_lims(1), ...
       SS.(strcat(list{var}, '_ss')), ...
       sprintf('Estado Estacionario: %0.2f', SS.(strcat(list{var}, '_ss'))), ...
       'Container', plot_p, ...
       'LineStyle', ':', ...
       'HeadStyle', 'none', ...
       'FontSize', 7 ...
       )

    % ----- Panel de Tabla -----
    table_p = uipanel( ...
        main_p, ...
        'Position', [0, 1 - 0.8 - 0.10, 1, 0.10], ...
        'BackgroundColor', [1, 1, 1] ...
    );
    plot_data_table( ...
        params.TabRange, ...
        MODEL.F_pred.(list{var})(params.TabRange), ...
        'Parent', table_p, ...
        'SeriesNames', list(var) ...
    )
    
    % ----- Panel de notas -----
     notes_p = uipanel( ...
        main_p, ...
        'Position', [0, 0, 1, 0.10], ...
        'BackgroundColor', [1, 1, 1] ...
    );
    temp_string = {...
        'Notas:', ...
        sprintf('   - Último dato observado en %s, correspondiente a la línea vertical punteada.', MODEL.data_mr.(list{var}).UserData.endhist), ...
        sprintf('   - Fuente historia: %s %s.', MODEL.data_mr.(list{var}).UserData.refhist, MODEL.data_mr.(list{var}).UserData.refhist_mmdate), ...
        sprintf('   - Fuente de anclaje: %s %s.', MODEL.data_mr.(list{var}).UserData.refpred, MODEL.data_mr.(list{var}).UserData.refpred_mmdate), ...
    };
    uicontrol( ...
        notes_p, ...
        'Style', 'text', ...
        'Units', 'normalized', ...
        'Position', [0, 0, 1, 1],...
        'String', temp_string,...
        'FontWeight', 'normal', ...
        'FontSize', 9, ...
        'HorizontalAlignment', 'left', ...
        'BackgroundColor', [1, 1, 1]);
    % ----- Parámetros adicionales ----
    axis on
% ----- Save -----


if var < 10
    num = sprintf("0%i", var);
else
    num = sprintf('%i', var);
end


pausaGuarda(...
    fullfile(params.SavePath, ...
    sprintf("%s_%s_shd_dsc_and_diff.png", num, list{var})), ...
    'AutoSave', params.AutoSave ...
)




end

if params.CloseAll
close all
end

end